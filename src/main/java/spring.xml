<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans.xsd
    	http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-4.2.xsd
    	http://www.springframework.org/schema/aop  http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
    	http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
    ">
    
   <!-- 
   	 	Spring 是bean的容器 (控制的是  service 和 repository 两层) 
   		只扫描service 和 repository 注解下的类
   -->
   <context:component-scan base-package="cn.et">
   	   <!-- 排除controller层 -->
       <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
   </context:component-scan>
   <!-- 所有的数据库操作的源头，都是实现自接口DataSouce
   		比如：DriverManagerDataSource
   		数据源 ：c3p0 dbcp druid(阿里，监控)
   		数据源的配置（以阿里的 druid 为例）
   -->
   <context:property-placeholder location="classpath:jdbc.properties"/>
   <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
       <property name="url" value="${url}"></property>
       <property name="driverClassName" value="${driverClass}"></property>
       <property name="username" value="${userid}"></property>
       <property name="password" value="${password}"></property>
       <!-- 默认初始化的连接个数 -->
       <property name="initialSize" value="1"></property>
       <!-- 最大允许的连接个数 -->
       <property name="maxActive" value="200"></property>
       <!-- 最大的等待人数 -->
       <property name="maxIdle" value="100"></property>
       <!-- 开启sql统计功能 -->
       <property name="filters" value="stat"></property>
   </bean>
   <!-- 通过spring集成Mybatis 
   		首先，配置session工厂
   -->
   <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
   		<property name="dataSource" ref="dataSource"></property>
   </bean>
   <!-- 其次，集成SqlSessionFactoryBean类 -->
  <!--  <bean id="sessionTemplate" class="org.mybatis.spring.SqlSessionFactoryBean">
   		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
   </bean> -->
   <!-- 构造器注入 -->
   <bean id="sessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
   		<constructor-arg index="0" ref="sqlSessionFactoryBean"></constructor-arg>
   </bean>
   <!-- 最后扫描mybatis的接口映射 -->
   <bean id="scannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   		<property name="basePackage" value="cn.*.mapper"></property>
   </bean>
    <!-- 配置事务 -->
   <!-- 事务管理器 -->
   <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   		<!-- 事务管理器   需要提交连接的事务-->
   		<property name="dataSource" ref="dataSource"></property>
   </bean>
   <!-- 事务特性；传播特性，隔离级别，只读特性，异常回滚 -->
   <tx:advice id="txAdvice" transaction-manager="dataSourceTransactionManager">
   		<tx:attributes>
   			<tx:method name="save*" propagation="REQUIRED"/>
   			<tx:method name="updata*" propagation="REQUIRED" />
   			<tx:method name="delete*" propagation="REQUIRED" />
   			<tx:method name="*" read-only="true"/>
   		</tx:attributes>
   </tx:advice>
   <aop:config>
   		<!-- 定义切点 -->
   		<aop:pointcut id="myPoinCut" expression="execution(* cn.*.service.*.*(..))" />
   		<!-- 关联切点和事务管理器  -->
   		<aop:advisor advice-ref="txAdvice" pointcut-ref="myPoinCut"/>
   </aop:config>
</beans>